#: kivy 1.10.1
#: import datetime datetime

<ScreenNew>:
    on_enter: _status_bar.set_status("Start by selecting one or more publisher(s). Try entering data starting from the top, as this screen changes dynamically.")
    publisher_dc_toggle: _dc_toggle
    publisher_marvel_toggle: _marvel_toggle
    publisher_dark_horse_toggle: _dark_horse_toggle
    publisher_image_toggle: _image_toggle

    other_publisher_toggle: _other_publisher_toggle
    other_publisher_text: _other_publisher_text
    title_text: _title_text
    issues_text: _issues_text
    start_date_text: _start_date_text
    end_date_text: _end_date_text
    edition_name_text: _edition_name_text
    edition_issues_text: _edition_issues_text
    status_bar: _status_bar

    ScreenTitle:
        id: _screen_title
        pos_hint: {'top': 1}
        text: "Holger's Comic Collection"
    ScreenContainer:
        pos: 0, _status_bar.top
        height: root.height - (_screen_title.height + 2 * _status_bar.height)
        disabled: True if _status_bar.screen_disabled else False

# Column 1
        BoxLayout:
            BoxLayout:
                id: _form_box
                size_hint_y: None
                height: self.minimum_height
                FieldBox:
                    FieldLabel: # used as a spacer
                    FieldBox:
                        Label:
                            font_size: sp(23)
                            text: "Add a new comic"
                FieldBox:
                    height: dp(75)
                    FieldLabel:
                        text: "Publisher(s)"
                        height: dp(75)
                        valign: 'bottom'
                    FieldBox:
                        id: _publisher_images
                        height: dp(75)
                        halign: 'center'
                        ToggleButton:
                            id: _dc_toggle
                            publisher: 'dc'
                            background_normal: 'images/' + self.publisher + '_normal.jpg'
                            background_down: 'images/' + self.publisher + '_down.jpg'
                            background_disabled_normal: 'images/' + self.publisher + '_disabled_normal.jpg'
                            background_disabled_down: 'images/' + self.publisher + '_disabled_down.jpg'
                            border: 0, 0, 0, 0
                            size: dp(75), dp(75)
                            on_state: root.publisher_count += 1 if self.state == 'down' else -1
                            on_release: _title_text.focus = True if root.publisher_count else False
                            on_release: _other_publisher_text.focus = True if not root.publisher_count and _other_publisher_toggle.state == 'down' and _other_publisher_text else False
                        Label:
                            width: (_publisher_images.width - (_dc_toggle.width + _marvel_toggle.width + _dark_horse_toggle.width + _image_toggle.width)) / 4
                        ToggleButton:
                            id: _marvel_toggle
                            publisher: 'marvel'
                            background_normal: 'images/' + self.publisher + '_normal.jpg'
                            background_down: 'images/' + self.publisher + '_down.jpg'
                            background_disabled_normal: 'images/' + self.publisher + '_disabled_normal.jpg'
                            background_disabled_down: 'images/' + self.publisher + '_disabled_down.jpg'
                            border: 0, 0, 0, 0
                            size: dp(149), dp(75)
                            on_state: root.publisher_count += 1 if self.state == 'down' else -1
                            on_release: _title_text.focus = True if root.publisher_count else False
                            on_release: _other_publisher_text.focus = True if not root.publisher_count and _other_publisher_toggle.state == 'down' and _other_publisher_text else False
                        Label:
                            width: (_publisher_images.width - (_dc_toggle.width + _marvel_toggle.width + _dark_horse_toggle.width + _image_toggle.width)) / 4
                        ToggleButton:
                            id: _dark_horse_toggle
                            publisher: 'dark_horse'
                            background_normal: 'images/' + self.publisher + '_normal.jpg'
                            background_down: 'images/' + self.publisher + '_down.jpg'
                            background_disabled_normal: 'images/' + self.publisher + '_disabled_normal.jpg'
                            background_disabled_down: 'images/' + self.publisher + '_disabled_down.jpg'
                            border: 0, 0, 0, 0
                            size: dp(56), dp(75)
                            on_state: root.publisher_count += 1 if self.state == 'down' else -1
                            on_release: _title_text.focus = True if root.publisher_count else False
                            on_release: _other_publisher_text.focus = True if not root.publisher_count and _other_publisher_toggle.state == 'down' and _other_publisher_text else False
                        Label:
                            width: (_publisher_images.width - (_dc_toggle.width + _marvel_toggle.width + _dark_horse_toggle.width + _image_toggle.width)) / 4
                        ToggleButton:
                            id: _image_toggle
                            publisher: 'image'
                            background_normal: 'images/' + self.publisher + '_normal.jpg'
                            background_down: 'images/' + self.publisher + '_down.jpg'
                            background_disabled_normal: 'images/' + self.publisher + '_disabled_normal.jpg'
                            background_disabled_down: 'images/' + self.publisher + '_disabled_down.jpg'
                            border: 0, 0, 0, 0
                            size: dp(43), dp(75)
                            on_state: root.publisher_count += 1 if self.state == 'down' else -1
                            on_release: _title_text.focus = True if root.publisher_count else False
                            on_release: _other_publisher_text.focus = True if not root.publisher_count and _other_publisher_toggle.state == 'down' and _other_publisher_text else False
                FieldBox:
                    FieldLabel:
                    FieldBox:
                        ToggleButton:
                            id: _other_publisher_toggle
                            size_hint: None, 1
                            width: _dc_toggle.width
                            color: .3, .3, .3, 1
                            background_color: 0,0,0,.2
                            on_state: self.color =  (.2, .7, .9, 1) if self.state == 'down' else (.3, .3, .3, 1)
                            text: 'Other'
                            on_release: _other_publisher_text.focus = True if self.state == 'down' else False
                            on_release: _title_text.focus = True if self.state == 'normal' and root.publisher_count else False

                        PredictiveTextInput:
                            id: _other_publisher_text
                            hint_text: 'separate publishers with commas'
                            opacity: 1 if _other_publisher_toggle.state == 'down' else 0
                            disabled: False if _other_publisher_toggle.state == 'down' else True
                            on_text: self.suggest_text(app, 'Publishers', 'publisher') if self.text else None
                            on_text: self.current_suggested_word = None if not self.text else self.current_suggested_word
                            on_text: root.publisher_text = self.text.strip() if self.text else ''
                            on_text_validate: self.complete_string(ending=', ') if self.current_suggested_word else None
                            on_text_validate: _title_text.focus = True if not self.current_suggested_word and self.text else False
                            # status_bar
                            default_text: "Enter name(s) of publisher(s), separated by commas. Enter an imprint in the following format: Imprint (Publisher), eg. Vertigo (DC)."
                            on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                            on_text: _status_bar.set_status(self.default_text) if self.focus else None
                            on_text: _status_bar.set_status("Press enter to auto complete suggested text. Current suggested text is \"" + self.current_suggested_word + "\"") if self.current_suggested_word and self.text else None

                FieldBox:
                    FieldLabel:
                        text: "Title"
                    TextInput:
                        id: _title_text
                        text_validate_unfocus: False
                        on_text: root.data['title'] = self.text.strip() if self.text else None
                        on_text_validate: _vol_text.focus = True if self.text else False
                        # status_bar
                        on_focus: _status_bar.set_status("Enter the comic's title.") if self.focus else _status_bar.clear_status()
                FieldBox:
                    FieldLabel:
                        text: "Volume #"
                    TextInput:
                        id: _vol_text
                        size_hint_x: None
                        width: dp(65)
                        on_text: root.data['volume'] = self.text.strip() if self.text else None
                        on_text_validate: _pre_issues_text.focus = True
                FieldBox:
                    FieldLabel:
                        text: "Pre-issues"
                    FieldBox:
                        TextInput:
                            id: _pre_issues_text
                            size_hint_x: None
                            width: _start_date_text.width
                            #hint_text: "eg. -1.5, -1.25, -1, 0"
                            on_text: root.data['pre_issues'] = self.text.strip() if self.text and not _issues_text.text else None
                            on_text_validate: _issues_text.focus = True
                            # status_bar
                            default_text: "Enter any uncommon issue numbers, eg. 0, -1, -1.25, -1.5, 2a, 2b, etc., separated by commas."
                            on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                            on_text: _status_bar.set_status(self.default_text) if self.text else None
                            on_text: _status_bar.set_status("Typing anything into this field won't have any effect until the Total Issues field isn't changed.", 'important') if self.text and _issues_text.text else None
                        FieldLabel:
                            text: "Total Issues"
                        IssueNumberInput:
                            id: _issues_text
                            input_type: 'number'
                            text_validate_unfocus: False
                            on_text: root.load_issues(_issues_container, int(self.text), _pre_issues_text.text, root.data) if self.text else _issues_container.clear_widgets()
                            on_text: root.data['issues_in_run'] = int(self.text) if self.text else None
                            on_text_validate: _start_date_text.focus = True if self.text else False
                            # status_bar
                            #TODO handle ongoing series issue eg. 20+
                            default_text: "Enter the number of standard issues. "#For ongoing series, enter the last published issue and a plus symbol, eg. \"142+\"."
                            on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                            on_text: _status_bar.set_status("Make sure to fill out Pre-Issues field (if necessary), before entering anything in this field!", 'important') if self.text and not _pre_issues_text.text else None
                            on_text: _status_bar.set_status(self.default_text) if self.text else None
                FieldBox:
                    FieldLabel:
                        text: "Run dates"
                    FieldBox:
                        TextInput:
                            id: _start_date_text
                            text_validate_unfocus: False
                            on_text: root.data['start_date'] = self.text if self.text else None
                            on_text_validate: _end_date_text.focus = True if self.text else False
                            # status_bar
                            default_text: "Enter the date in one of these formats: \"DD/MM/YYYY\", \"MM/YYYY\". Wikipedia might be able to help you with unknown dates."
                            on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                        Label:
                            text: "to"
                        TextInput:
                            id: _end_date_text
                            on_text: root.data['end_date'] = self.text if self.text else None
                            on_text_validate: _edition_name_text.focus = True
                            # status_bar
                            #TODO handle empty fields
                            on_focus: _status_bar.set_status("Leave this field blank for ongoing series, otherwise same format applies as with start date.")
                FieldBox:
                    FieldLabel:
                        text: 'Other Edition(s)'
                    FieldBox:
                        FieldBox:
                            TextInput:
                                id: _edition_name_text
                                size_hint_x: None
                                width: _start_date_text.width
                                on_text: self.foreground_color = (1, 0, 0, 1) if self.text in root.other_editions_data else (.2, .7, .9, 1)
                                on_text: _annuals_box.opacity = 1 if 'annual' in self.text.lower().strip() else 0
                                on_text_validate: _notes_text.focus = True if not self.text else False
                                on_text_validate: _edition_issues_text.focus = True if self.text and not _edition_issues_text.disabled else False
                                on_text_validate: _first_annual_text.focus = True if self.text and _edition_issues_text.disabled else False
                                # status_bar
                                default_text: "Enter something like \"Annuals\" or \"Specials\"into this field. This field can be re-used multiple times after \"Add\" is clicked."
                                on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                            FieldBox:
                                opacity: 0 if _annuals_box.opacity == 1 else 1
                                disabled: False if _annuals_box.disabled else True
                                FieldLabel:
                                    id: _edition_issues_label
                                    text: 'Issues'
                                TextInput:
                                    id: _edition_issues_text
                                    text_validate_unfocus: False
                                    disabled: True if _edition_name_text.text == '' else False
                                    size_hint_x: None
                                    width: dp(65)
                                    on_text_validate: root.add_new_edition(_editions_container, _edition_name_text.text, int(_edition_issues_text.text)) if self.text else None
                                    on_text_validate: _edition_name_text.focus = True if self.text else False
                                    # status_bar
                                    default_2: " and make sure to either click \"Add\" or press ENTER to add " + _edition_name_text.text + " to \"" + _editions_label.text + "\" section."
                                    default_text: "Enter the number of issues" + self.default_2
                                    on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                                Button:
                                    text: 'Add'
                                    disabled: True if _edition_issues_text.disabled or not _edition_issues_text.text or _edition_name_text.text in root.other_editions_data else False
                                    on_press: root.add_new_edition(_editions_container, _edition_name_text.text, int(_edition_issues_text.text)); _edition_name_text.focus = True
                FieldBox:
                    id: _annuals_box
                    opacity: 0
                    disabled: True if self.opacity == 0 else False
                    FieldLabel:
                    FieldBox:
                        Label:
                            text: 'from'
                        TextInput:
                            id: _first_annual_text
                            input_type: 'number'
                            on_text_validate: self.text = '1' if not self.text else self.text; _last_annual_text.focus = True if self.text else False

                            # status_bar
                            on_text: _last_annual_text.default_text = _last_annual_text.default_1 if self.text == '1' else _last_annual_text.default_2
                            default_text: "Enter either the first year (\"YYYY\") or leave field blank for numbered annuals."
                            on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                        Label:
                            text: 'to'
                        TextInput:
                            id: _last_annual_text
                            input_type: 'number'
                            text_validate_unfocus: False
                            #TODO handle ongoing series
                            on_text_validate: root.add_annuals(_editions_container, _edition_name_text, _first_annual_text, self) if self.text and _first_annual_text.text else None
                            on_text_validate: root.add_annuals(_editions_container, _edition_name_text, _first_annual_text, self) if not self.text and _first_annual_text.text != '1' else None
                            on_text_validate: _edition_name_text.focus = True if self.text and _first_annual_text.text else False
                            # status_bar
                            default_extension: " and make sure to either click \"Add\" or press ENTER to add " + _edition_name_text.text + " to \"" + _editions_label.text + "\" section."
                            default_1: "Enter the last issue number" + self.default_extension
                            default_2: "Enter the last year (\"YYYY\") " + self.default_extension
                            default_text: self.default_1
                            on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                        Button:
                            text: 'Add'
                            on_press: root.add_annuals(_editions_container, _edition_name_text, _first_annual_text, _last_annual_text); _edition_name_text.focus = True
                FieldBox:
                    height: dp(150)
                    FieldLabel:
                        height: dp(150)
                        valign: 'top'
                        text: 'Notes'
                    TextInput:
                        id: _notes_text
                        height: dp(150)
                        multiline: True
                        on_text: root.data['notes'] = self.text.strip() if self.text else None
                        on_text_validate: _issue_number_text.focus = True if not self.text else False
                        # status_bar
                        default_text: "Enter any kind of note you wish. That's some real freedom, man!"
                        on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                FieldBox:
                    FieldLabel:
                        text: 'Issue #'
                    FieldBox:
                        MyTextInput:
                            id: _issue_number_text
                            number_of_spaces_allowed: 0
                            text_validate_unfocus: False
                            size_hint_x: None
                            width: dp(65)
                            foreground_color: (1, 0, 0, 1) if self.text in root.data['issue_notes'] else (.2, .7, .9, 1)
                            on_text_validate: _issue_note_text.focus = True if self.text and self.text not in root.data['issue_notes'] else False
                            #TODO check whether issue exists in issues
                            # status_bar
                            default_text: "Enter an issue number." # The issue number has to exist in given issues for this to work."
                            on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                        Label:
                            text: 'Note'
                        TextInput:
                            id: _issue_note_text
                            text_validate_unfocus: False
                            disabled: False if _issue_number_text.text and _issue_number_text.text not in root.data['issue_notes'] else True
                            on_text_validate: root.add_issue_note(_issue_note_container, _issue_number_text, _issue_note_text) if self.text else None
                            # status_bar
                            default_text: "Enter note for issue #" + _issue_number_text.text + " and click \"Add\" or press ENTER to add note to list below the current field."
                            on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                        Button:
                            disabled: True if _issue_note_text.disabled == True or not _issue_note_text.text or _issue_number_text.text in root.data['issue_notes'] else False
                            text: 'Add'
                            on_release: root.add_issue_note(_issue_note_container, _issue_number_text, _issue_note_text) if _issue_note_text.text else None
            ScrollView:
                height: self.parent.height - _form_box.height
                BoxLayout:
                    id: _issue_note_container
                    status_bar: _status_bar
                    size_hint_y: None
                    height: self.minimum_height
                    padding: 0, dp(10)

# standard issues box starts here
        BoxLayout:
            FieldBox:
                id: _issues_box_title
                Label:
                    size_hint_x: 1
                    text_size: self.size
                    text: "select owned issue(s) "
                FieldBox:
                    size_hint_x: None
                    width: self.minimum_width
                    Button:
                        disabled: False if _issues_container.children else True
                        text: 'all'
                        on_release: root.select_all_issues(_issues_container)
                    Button:
                        disabled: False if _issues_container.children else True
                        text: 'none'
                        on_release: root. deselect_all_issues(_issues_container)
            ScrollView:
                height: self.parent.height - _issues_box_title.height
                GridLayout:
                    id: _issues_container
                    _root: root
                    padding: dp(5)
                    spacing: dp(2)
                    cols: 10
        BoxLayout:
            size_hint: .5, 1
            FieldBox:
                Label:
                    id: _editions_label
                    text: "Other Edition(s)"
            ScrollView:
                height: self.parent.height - _editions_label.height
                BoxLayout:
                    id: _editions_container
                    _root: root
                    size_hint_y: None
                    height: self.minimum_height
    BoxLayout:
        padding: dp(10)
        FieldBox:
            StatusBar:
                id: _status_bar
            Button:
                id: _submit_btn
                disabled: True if _status_bar.screen_disabled else False
                text: 'Submit'
                on_release: root.submit(app)
