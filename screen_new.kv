#: kivy 1.10.1
#: import datetime datetime

<ScreenNew>:
    on_enter: _status_bar.set_status("Start by selecting one or more publisher(s).")
    publisher_dc_toggle: _dc_toggle
    publisher_marvel_toggle: _marvel_toggle
    publisher_dark_horse_toggle: _dark_horse_toggle
    publisher_image_toggle: _image_toggle

    other_publisher_toggle: _other_publisher_toggle
    other_publisher_text: _other_publisher_text
    title_text: _title_text
    issues_text: _issues_text
    start_date_text: _start_date_text
    end_date_text: _end_date_text
    special_issue_notes: _special_issue_notes
    issue_note_container: _issue_note_container
    edition_name_text: _edition_name_text
    edition_issues_text: _edition_issues_text
    status_bar: _status_bar

    ScreenTitle:
        id: _screen_title
        pos_hint: {'top': 1}
        text: "Holger's Comic Collection"
    ScreenContainer:
        id: _screen_container
        pos: 0, _status_bar.top
        height: root.height - (_screen_title.height + 2 * _status_bar.height)
        disabled: True if _status_bar.screen_disabled else False

# Column 1
        BoxLayout:
            id: _column1
            BoxLayout:
                id: _form_box
                size_hint_y: None
                height: self.minimum_height
                FieldBox:
                    FieldLabel: # used as a spacer
                    FieldBox:
                        Label:
                            font_size: sp(23)
                            text: "Add a new comic"
                FieldBox:
                    height: dp(50)
                    FieldLabel:
                        text: "Publisher(s)"
                        height: dp(50)
                        valign: 'bottom'
                    FieldBox:
                        id: _publisher_images
                        spacing: 0
                        height: dp(50)
                        halign: 'center'
                        ToggleButton:
                            id: _dc_toggle
                            publisher: 'dc'
                            background_normal: 'images/' + self.publisher + '_normal.png'
                            background_down: 'images/' + self.publisher + '_down.png'
                            background_disabled_normal: 'images/' + self.publisher + '_disabled_normal.png'
                            background_disabled_down: 'images/' + self.publisher + '_disabled_down.png'
                            border: 0, 0, 0, 0
                            size: dp(50), dp(50)
                            on_state: root.publisher_count += 1 if self.state == 'down' else -1
                            on_release: _title_text.focus = True if root.publisher_count else False
                            on_release: _other_publisher_text.focus = True if not root.publisher_count and _other_publisher_toggle.state == 'down' and _other_publisher_text else False
                        Label:
                            width: (_publisher_images.width - (_dc_toggle.width + _marvel_toggle.width + _dark_horse_toggle.width + _image_toggle.width + _other_publisher_toggle.width)) / 4
                        ToggleButton:
                            id: _marvel_toggle
                            publisher: 'marvel'
                            background_normal: 'images/' + self.publisher + '_normal.png'
                            background_down: 'images/' + self.publisher + '_down.png'
                            background_disabled_normal: 'images/' + self.publisher + '_disabled_normal.png'
                            background_disabled_down: 'images/' + self.publisher + '_disabled_down.png'
                            border: 0, 0, 0, 0
                            size: dp(110), dp(50)
                            on_state: root.publisher_count += 1 if self.state == 'down' else -1
                            on_release: _title_text.focus = True if root.publisher_count else False
                            on_release: _other_publisher_text.focus = True if not root.publisher_count and _other_publisher_toggle.state == 'down' and _other_publisher_text else False
                        Label:
                            width: (_publisher_images.width - (_dc_toggle.width + _marvel_toggle.width + _dark_horse_toggle.width + _image_toggle.width + _other_publisher_toggle.width)) / 4
                        ToggleButton:
                            id: _dark_horse_toggle
                            publisher: 'dark_horse'
                            background_normal: 'images/' + self.publisher + '_normal.png'
                            background_down: 'images/' + self.publisher + '_down.png'
                            background_disabled_normal: 'images/' + self.publisher + '_disabled_normal.png'
                            background_disabled_down: 'images/' + self.publisher + '_disabled_down.png'
                            border: 0, 0, 0, 0
                            size: dp(34), dp(50)
                            on_state: root.publisher_count += 1 if self.state == 'down' else -1
                            on_release: _title_text.focus = True if root.publisher_count else False
                            on_release: _other_publisher_text.focus = True if not root.publisher_count and _other_publisher_toggle.state == 'down' and _other_publisher_text else False
                        Label:
                            width: (_publisher_images.width - (_dc_toggle.width + _marvel_toggle.width + _dark_horse_toggle.width + _image_toggle.width + _other_publisher_toggle.width)) / 4
                        ToggleButton:
                            id: _image_toggle
                            publisher: 'image'
                            background_normal: 'images/' + self.publisher + '_normal.png'
                            background_down: 'images/' + self.publisher + '_down.png'
                            background_disabled_normal: 'images/' + self.publisher + '_disabled_normal.png'
                            background_disabled_down: 'images/' + self.publisher + '_disabled_down.png'
                            border: 0, 0, 0, 0
                            size: dp(24), dp(50)
                            on_state: root.publisher_count += 1 if self.state == 'down' else -1
                            on_release: _title_text.focus = True if root.publisher_count else False
                            on_release: _other_publisher_text.focus = True if not root.publisher_count and _other_publisher_toggle.state == 'down' and _other_publisher_text else False
                        Label:
                            width: (_publisher_images.width - (_dc_toggle.width + _marvel_toggle.width + _dark_horse_toggle.width + _image_toggle.width + _other_publisher_toggle.width)) / 4
                        ToggleButton:
                            id: _other_publisher_toggle
                            size_hint: None, None
                            size: self.texture_size
                            valign: 'bottom'
                            color: .3, .3, .3, 1
                            background_color: 0,0,0,.2
                            on_state: self.color =  (.2, .7, .9, 1) if self.state == 'down' else (.3, .3, .3, 1)
                            text: 'Other'
                            on_release: _other_publisher_text.focus = True if self.state == 'down' else False
                            on_release: _title_text.focus = True if self.state == 'normal' and root.publisher_count else False
                FieldBox:
                    FieldLabel:
                    FieldBox:
                        PredictiveTextInput:
                            id: _other_publisher_text
                            hint_text: 'separate publishers with commas'
                            opacity: 1 if _other_publisher_toggle.state == 'down' else 0
                            disabled: False if _other_publisher_toggle.state == 'down' else True
                            on_text: self.suggest_text(app.db_cursor(), 'PUBLISHERS', 'publisher') if self.text else None
                            on_text: self.current_suggested_word = '' if not self.text else self.current_suggested_word
                            on_text: root.publisher_text = self.text.strip() if self.text else ''
                            on_text_validate: self.complete_string(ending=', ') if self.current_suggested_word else None
                            on_text_validate: _title_text.focus = True if not self.current_suggested_word and self.text else False
                            # status_bar
                            default_text: "Enter name(s) of publisher(s), separated by commas. Enter an imprint in the following format: Imprint (Publisher), eg. Vertigo (DC)."
                            on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                            on_text: _status_bar.set_status(self.default_text) if self.focus else None
                            on_text: _status_bar.set_status("Press enter to auto complete suggested text. Current suggested text is \"" + self.current_suggested_word + "\"") if self.current_suggested_word and self.text else None

                FieldBox:
                    FieldLabel:
                        text: "Title"
                    TextInput:
                        id: _title_text
                        text_validate_unfocus: False
                        on_focus: root.data['title'] = self.text
                        on_text_validate: _format_text.focus = True if self.text else False
                        # status_bar
                        on_focus: _status_bar.set_status("Enter the comic's title.") if self.focus else _status_bar.clear_status()
                FieldBox:
                    FieldLabel:
                        text: "Format"
                    FieldBox:
                        PredictiveTextInput:
                            id: _format_text
                            on_text: self.suggest_text(app.db_cursor(), 'FORMATS', 'format') if self.text else None
                            on_focus: root.data['format'] = self.text
                            on_text_validate: _vol_text.focus = True if not self.current_suggested_word else False
                            # status_bar
                            on_focus: _status_bar.set_status("Enter the format of the standard issues.") if self.focus else _status_bar.clear_status()

                        FieldLabel:
                            text: "Volume #"
                        TextInput:
                            id: _vol_text
                            size_hint_x: None
                            width: dp(65)
                            on_focus: root.data['volume'] = self.text
                            on_text_validate: _issues_text.focus = True
                            # status_bar
                            on_focus: _status_bar.set_status("Enter the volume number, if any.") if self.focus else _status_bar.clear_status()

                FieldBox:
                    FieldLabel:
                        text: "Total issues"
                    FieldBox:
                        IssueNumberInput:
                            # TODO add a loading icon
                            id: _issues_text
                            text_validate_unfocus: False
                            on_focus: root.load_issues(_issues_container, self) if not self.focus and self.text else None
                            on_text_validate: root.load_issues(_issues_container, self) if self.text else _issues_container.clear_widgets()
                        #  load_issues() handles focus of _start_date_text
                            # status_bar
                            default_text: "Enter the number of standard issues. For ongoing series, enter something like \"142+\". Weird things like \"25-132\" would also work."
                            on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()

                        FieldLabel:
                            text: "Run dates"
                        FieldBox:
                            DateInput:
                                id: _start_date_text
                                text_validate_unfocus: False
                                on_focus: root.data['start_date'] = self.text if self.text and not self.focus else None
                                on_text_validate: root.data['start_date'] = self.text if self.text else None
                                # change focus
                                on_text_validate: _pre_issues_text.focus = True if _end_date_text.disabled else False
                                on_text_validate: _end_date_text.focus = True if not _end_date_text.disabled else False
                                # status_bar
                                default_text: "Enter the date in one of these formats: \"DD/MM/YYYY\", \"MM/YYYY\" or just \"YYYY\"."
                                on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                            FieldLabel:
                                text: "to"
                                halign: 'center'
                                font_size: sp(15)
                            DateInput:
                                id: _end_date_text
                                disabled: True if root.ongoing_series or not _start_date_text.text else False
                                text: 'disabled' if _issues_text.text.endswith('+') else ''
                                on_focus: root.data['end_date'] = self.text if self.text and not self.focus else None
                                on_text_validate: root.data['end_date'] = self.text if self.text else None
                                # change focus
                                on_text_validate: _pre_issues_text.focus = True
                                # status_bar
                                on_focus: _status_bar.set_status("Leave this field blank for ongoing series, otherwise same format applies as with start date.")
                FieldBox:
                    FieldLabel:
                        text: "Odd issues"
                    FieldBox:
                        TextInput:
                            id: _pre_issues_text
                            size_hint_x: 1
                            on_focus: root.load_issues(_odd_issues_container, self) if self.text and not self.focus else None
                            on_text_validate: root.load_issues(_odd_issues_container, self.text) if self.text else None
                            # change focus
                            on_text_validate: _edition_name_text.focus = True
                            # status_bar
                            default_text: "Enter any uncommon issue numbers, eg. 0, -1, -1.25, -1.5, etc. For variations enter issue number plus _, eg. 1_, 2_a, 2_b."
                            on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                FieldBox:
                    FieldLabel:
                        text: 'Other edition(s)'
                    FieldBox:
                        FieldBox:
                            PredictiveTextInput:
                                id: _edition_name_text
                                size_hint_x: 1
                                on_text: self.foreground_color = (1, 0, 0, 1) if self.text in root.other_editions_data else (.2, .7, .9, 1)
                                on_text: self.suggest_text_from_list(['Annuals', 'Specials']) if self.text else None
                                on_text: _annuals_box.opacity = 1 if 'annual' in self.text.lower() else 0
                                on_text_validate: self.complete_string(ending='') if self.current_suggested_word else None
                                on_text_validate: _edition_issues_text.focus = True if self.text and not self.current_suggested_word and not _edition_issues_text.disabled else False
                                # change focus
                                on_text_validate: _notes_text.focus = True if not self.text else False
                                on_text_validate: _first_annual_text.focus = True if not self.current_suggested_word and not _first_annual_text.disabled else False
                                # status_bar
                                default_text: "Enter something like \"Annuals\" or \"Specials\" into this field. This field can be re-used multiple times after \"Add\" is clicked."
                                on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                            FieldBox:
                                disabled: True if not _edition_name_text.text or 'annuals' in _edition_name_text.text.lower() else False
                                opacity: 0 if _annuals_box.opacity == 1 else 1
                                FieldLabel:
                                    id: _edition_issues_label
                                    text: 'Issues'
                                TextInput:
                                    id: _edition_issues_text
                                    text_validate_unfocus: False
                                    size_hint_x: None
                                    width: dp(65)
                                    on_text_validate: root.add_new_edition(_editions_container, _edition_name_text.text, _edition_issues_text.text) if self.text else None
                                    on_text_validate: _edition_name_text.focus = True if self.text else False
                                    # status_bar
                                    default_2: " and make sure to either click \"Add\" or press ENTER to add " + _edition_name_text.text + " to \"" + _editions_label.text + "\" section."
                                    default_text: "Enter the number of issues" + self.default_2
                                    on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                                Button:
                                    text: 'Add'
                                    disabled: True if _edition_issues_text.disabled or not _edition_issues_text.text or _edition_name_text.text in root.other_editions_data else False
                                    on_press: root.add_new_edition(_editions_container, _edition_name_text.text, int(_edition_issues_text.text)); _edition_name_text.focus = True
                FieldBox:
                    id: _annuals_box
                    opacity: 0
                    disabled: True if self.opacity == 0 else False
                    FieldLabel:
                    FieldBox:
                        FieldLabel:
                            id: _annuals_from
                            text: 'from'
                            halign: 'center'
                            size_hint_x: 1
                        TextInput:
                            id: _first_annual_text
                            input_type: 'number'
                            size_hint_x: 1
                            on_text_validate: self.text = '1' if not self.text else self.text; _last_annual_text.focus = True if self.text else False
                            # status_bar
                            on_text: _last_annual_text.default_text = _last_annual_text.default_1 if self.text == '1' else _last_annual_text.default_2
                            default_text: "Enter either the first year (\"YYYY\") or leave field blank for numbered annuals."
                            on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                        FieldLabel:
                            text: 'to'
                            halign: 'center'
                            size_hint_x: 1
                        TextInput:
                            id: _last_annual_text
                            size_hint_x: 1
                            input_type: 'number'
                            text_validate_unfocus: False
                            #TODO handle ongoing series
                            on_text_validate: root.add_annuals(_editions_container, _edition_name_text, _first_annual_text, self) if self.text and _first_annual_text.text else None
                            on_text_validate: root.add_annuals(_editions_container, _edition_name_text, _first_annual_text, self) if not self.text and _first_annual_text.text != '1' else None
                            on_text_validate: _edition_name_text.focus = True if self.text and _first_annual_text.text else False
                            # status_bar
                            default_extension: " and make sure to either click \"Add\" or press ENTER to add " + _edition_name_text.text + " to \"" + _editions_label.text + "\" section."
                            default_1: "Enter the last issue number" + self.default_extension
                            default_2: "Enter the last year (\"YYYY\") " + self.default_extension
                            default_text: self.default_1
                            on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                        Button:
                            text: 'Add'
                            on_press: root.add_annuals(_editions_container, _edition_name_text, _first_annual_text, _last_annual_text); _edition_name_text.focus = True
                FieldBox:
                    height: dp(100)
                    FieldLabel:
                        height: dp(100)
                        valign: 'top'
                        text: 'Notes'
                    TextInput:
                        id: _notes_text
                        height: dp(100)
                        multiline: True
                        on_text: root.data['notes'] = self.text.strip() if self.text else None
                        on_text_validate: _issue_number_text.focus = True if not self.text else False
                        # status_bar
                        default_text: "Enter any kind of note you wish. That's some real freedom, man!"
                        on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                FieldBox:
                    FieldLabel:
                        text: 'Issue #'
                    FieldBox:
                        MyTextInput:
                            id: _issue_number_text
                            number_of_spaces_allowed: 0
                            text_validate_unfocus: False
                            size_hint_x: None
                            width: dp(65)
                            foreground_color: (1, 0, 0, 1) if self.text in root.issue_notes else (.2, .7, .9, 1)
                            on_text_validate: _issue_note_text.focus = True if self.text and self.text not in root.issue_notes else False
                            on_text_validate: root.focus_special_issue(_special_issue_notes) if _special_issue_notes.children else None

                            #on_text_validate: _special_issue_notes.ids['2_'].focus = True if _special_issue_notes.children else False
                            #TODO check whether issue exists in issues
                            # status_bar
                            default_text: "Enter an issue number." # The issue number has to exist in given issues for this to work."
                            on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                        FieldLabel:
                            text: 'Note'
                        TextInput:
                            id: _issue_note_text
                            text_validate_unfocus: False
                            disabled: False if _issue_number_text.text and _issue_number_text.text not in root.data['issue_notes'] else True
                            on_text_validate: root.add_issue_note(_issue_number_text, self) if self.text else None
                            #on_text_validate: root.issue_notes[_issue_number_text.] = self.text.strip()
                            # status_bar
                            default_text: "Enter note for issue #" + _issue_number_text.text + " and click \"Add\" or press ENTER to add note to list below the current field."
                            on_focus: _status_bar.set_status(self.default_text) if self.focus else _status_bar.clear_status()
                        Button:
                            disabled: True if _issue_note_text.disabled == True or not _issue_note_text.text or _issue_number_text.text in root.data['issue_notes'] else False
                            text: 'Add'
                            on_release: root.add_issue_note(_issue_number_text, _issue_note_text) if _issue_note_text.text else None
            BoxLayout:
                id: _special_issue_notes
                size_hint: 1, None
                height: self.minimum_height
            ScrollView:
                height: self.parent.height - (_form_box.height + _special_issue_notes.height)
                BoxLayout:
                    id: _issue_note_container
                    status_bar: _status_bar
                    size_hint_y: None
                    height: self.minimum_height
                    padding: 0, dp(10)

# standard issues box starts here
        BoxLayout:
            id: _column2
            FieldBox:
                id: _issues_box_title
                Label:
                    size_hint_x: 1
                    text_size: self.size
                    text: "select owned issue(s) "
                FieldBox:
                    size_hint_x: None
                    width: self.minimum_width
                    Button:
                        disabled: False if _issues_container.children or _odd_issues_container.children else True
                        text: 'all'
                        on_release: root.select_all_issues(_issues_container)
                    Button:
                        disabled: False if _issues_container.children or _odd_issues_container.children else True
                        text: 'none'
                        on_release: root. deselect_all_issues(_issues_container)
                        # TODO update select_all and deselect_all to check odd issues as well
            GridLayout:
                id: _odd_issues_container
                pos:
                cols: 10
            ScrollView:
                height: self.parent.height - (_issues_box_title.height + _odd_issues_container.height)
                GridLayout:
                    id: _issues_container
                    _root: root
                    cols: 10
        BoxLayout:
            size_hint: .5, 1
            FieldBox:
                Label:
                    id: _editions_label
                    text: "Other Edition(s)"
            ScrollView:
                height: self.parent.height - _editions_label.height
                BoxLayout:
                    id: _editions_container
                    _root: root
                    size_hint_y: None
                    height: self.minimum_height
    BoxLayout:
        padding: dp(10)
        FieldBox:
            canvas:
                Color:
                    rgba: 0, 0, 0 , .5
                Rectangle:
                    pos: self.pos
                    size: self.size
            StatusBar:
                id: _status_bar
            Button:
                id: _submit_btn
                disabled: True if _status_bar.screen_disabled else False
                text: 'Submit'
                on_release: root.submit(app)
